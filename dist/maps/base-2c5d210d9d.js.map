{"version":3,"sources":["app/js/app.js","app/js/controllers/fitch.controller.js","app/js/controllers/main.controller.js","app/js/controllers/menu.controller.js","app/js/controllers/truth-table.controller.js","app/js/services/formula.service.js","app/js/services/syntax.service.js","app/js/services/fitch/fitch-stack.model.js","app/js/services/fitch/premise-tree.model.js","app/js/services/fitch/scope.model.js","app/js/services/fitch/rules/bicondition.service.js","app/js/services/fitch/rules/conjunction.service.js","app/js/services/fitch/rules/disjunction.service.js","app/js/services/fitch/rules/implication.service.js","app/js/services/fitch/rules/negation.service.js","app/js/services/premise/premise.model.js","app/js/services/tables/table-generator.service.js","app/js/services/tables/table.model.js"],"names":["angular","module","config","$stateProvider","$urlRouterProvider","otherwise","state","url","templateUrl","controller","FitchStack","Premise","PremiseTree","fitchBicondition","fitchConjunction","fitchDisjunction","fitchImplication","fitchNegation","syntaxChecker","_init","this","marginLeft","premise","premiseGraph","selected","showDisjoinField","structure","valueToDisjoin","_entail","parentPremises","entail","_appendPremiseChild","_multipleEntialment","premises","_","forEach","call","bind","_getSelectedPremises","filter","_getValidSelecedPremises","scopes","scopeIds","map","indexOf","scopeId","_uncheckPremises","length","checked","_groupOrPremises","disjunctions","implications","isOr","digest","isImplication","structrue","childPremise","appendChildNode","assume","currentScope","headPremise","value","validate","openScope","getCurrentScope","id","scopeLayer","layer","appendNode","refresh","closeDisjoinField","disjoinPremise","newPremises","introduction","andIntroduction","andElimination","elimination","negationIntro","newPremise","negationElim","implicationIntro","lastScope","closeScope","head","last","implicationElim","orElimination","groupedPremises","orIntroduction","reiterate","reiterated","key","removeNode","reset","biconditionalIntro","biconditionalElim","$location","goToTruth","path","goToFitch","tableGenerator","getTableHeader","table","chain","keys","val","labels","getTableRows","rows","tableValue","each","values","col","keyc","keyr","push","selectedPremises","truthTable","build","generate","header","factory","isThen","exec","isAnd","isBicon","resultFn","getResult","a","b","service","_emptyPremise","Scope","props","universalScope","scopeHistory","_getLastItem","items","slice","_createScopes","uniqBy","scopeBase","find","concat","_premisesByScope","groupBy","_setScopesItems","scope","sortBy","blur","_getActiveScopes","prevScopeLayer","prevScopePosition","activeIds","scopePosition","splice","prototype","removedScope","newCurrentScope","remove","focus","headAssumption","assumption","append","new","fitchProps","proofTree","_removePremise","premiseToRemove","filteredPremises","_mergePremiseScopes","_removeChildNode","node","childNode","child","_removeInvalidChildren","_findPremise","_removeTreeNode","premiseIndex","_getPremiseNodeIndex","indexNode","newNode","_getChildrenIds","index","_cutTree","ids","_cutPremises","_getGrandchildren","childrenIds","flattenDeep","prevScopeId","layerIncrement","premiseNode","parentPremise","parentIndex","childIndex","grandChildrenIds","isFocused","item","Object","defineProperty","get","scopeProps","_validatePremises","firstPremise","secondPremise","firstValue","secondValue","_validateImplications","firstConclusion","firstAssumption","secondConclusion","secondAssumption","getExpandedConclusion","getExpandedAssumption","_getImplications","digested","atomics","split","atomicPremise","expand","_getBiconditions","_getConjuctions","premisesValue","premiseValue","_getPosibleJoins","selectedValues","isCompound","digestedPremise","simplePremise","expanded","unwrap","_getUniqueConclusions","getConclusion","uniq","_getAssumptions","getAssumption","_getDisjunctions","_isValidOperation","disjunction","assumptions","label","uniqueConclusions","eliminate","premiseOne","premiseTwo","conclusion","assumptionNegated","hasNegation","digestedHead","digestedLast","_validImplications","_validPremises","_getAssumption","_validNegations","_validNegation","_validConclusions","_validConclusion","_getPureConclusion","_getConclusion","conclusionOne","conclusionTwo","_getRawConclusion","_removeNegation","replace","newValue","negations","match","removeNegation","_removeSpaces","_breakPremise","_createLabels","createdLabels","Array","k","join","_extractPremises","_reducePremise","subPremise","matchExpr","RegExp","_expandPremise","labelsKeys","_splitImplication","IMPLICATION_REGEX","_unwrap","unwraped","NEGATION_REGEX","callback","copyPremise","assign","base","premiseLabel","indexPremise","symbol","splited","undefined","getPrimitives","Table","_getAtomicPremises","_buildAtomicValues","columns","column","Math","pow","mapValues","getAtomicValue","_buildAtomicColumn","atomicPremises","initialPremises","premisesValues","_buildCompoundColumn","basePremise","getCompoundValue","formula","_negateColumn","negation","result","atomic","operator","Number","eval","ca","cb","c","getFormula","nCol","nRows","row","nchange","sumup"],"mappings":"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","file":"base-2c5d210d9d.js","sourcesContent":["'use strict';\r\n\r\nangular\r\n    .module('logicToolsApp', ['ui.router'])\r\n    .config(function ($stateProvider, $urlRouterProvider) {\r\n        $urlRouterProvider.otherwise('/');\r\n        $stateProvider\r\n            .state('main', {\r\n                url: '/',\r\n                templateUrl: 'templates/main.html',\r\n                controller: 'MainCtrl as main'\r\n            })\r\n            .state('truthTables', {\r\n                url: '/truth-tables',\r\n                templateUrl: 'templates/truth-table.html',\r\n                controller: 'TruthTableCtrl as table'\r\n            })\r\n            .state('fitchSystems', {\r\n                url: '/fitch',\r\n                templateUrl: 'templates/fitch.html',\r\n                controller: 'FitchCtrl as fitch'\r\n            });\r\n    })\r\n","'use strict';\r\n\r\nangular\r\n  .module('logicToolsApp')\r\n  .controller('FitchCtrl', function (\r\n      FitchStack,\r\n      Premise,\r\n      PremiseTree,\r\n      fitchBicondition,\r\n      fitchConjunction,\r\n      fitchDisjunction,\r\n      fitchImplication,\r\n      fitchNegation,\r\n      syntaxChecker\r\n    ) {\r\n\r\n      _init.call(this);\r\n\r\n      this.assume = function() {\r\n        var currentScope, labels, headPremise;\r\n\r\n        headPremise = Premise.new({\r\n          value: this.premise\r\n        });\r\n\r\n        if (!syntaxChecker.validate(headPremise)) {\r\n          return;\r\n        }\r\n\r\n        this.structure.openScope(headPremise);\r\n        currentScope = this.structure.getCurrentScope();\r\n        headPremise.scopeId = currentScope.id;\r\n        headPremise.scopeLayer = currentScope.layer;\r\n        this.premiseGraph.appendNode(headPremise);\r\n        this.premise = '';\r\n      };\r\n\r\n      this.refresh = function () {\r\n        _init.call(this);\r\n      }\r\n\r\n      this.closeDisjoinField = function () {\r\n        this.showDisjoinField = false;\r\n        this.valueToDisjoin = '';\r\n      }\r\n\r\n      this.disjoinPremise = function () {\r\n        var newPremises, currentScope, selected, disjointPremise;\r\n        currentScope = this.structure.getCurrentScope();\r\n        selected = _getValidSelecedPremises(this.premiseGraph.premises, this.structure.scopes);\r\n        _uncheckPremises(this.premiseGraph.premises, this.selected);\r\n        if (!selected.length || !this.valueToDisjoin) {\r\n            return;\r\n        }\r\n        newPremises = fitchDisjunction.introduction(this.valueToDisjoin, selected, currentScope);\r\n        this.showDisjoinField = false;\r\n        this.valueToDisjoin = '';\r\n        if (!newPremises) {\r\n            return;\r\n        }\r\n        _multipleEntialment.call(this, newPremises, selected);\r\n      };\r\n\r\n      /*Operations*/\r\n      this.andIntroduction = function () {\r\n        var selected, newPremises, secondPremise, currentScope;\r\n        currentScope = this.structure.getCurrentScope();\r\n        selected = _getValidSelecedPremises(this.premiseGraph.premises, this.structure.scopes);\r\n        _uncheckPremises(this.premiseGraph.premises, this.selected);\r\n        if (selected.length < 2) {\r\n          return;\r\n        }\r\n        newPremises = fitchConjunction.introduction(selected, currentScope);\r\n        if (!newPremises) {\r\n          return;\r\n        }\r\n        _multipleEntialment.call(this, newPremises, selected);\r\n      };\r\n      this.andElimination = function () {\r\n        var selected, newPremises, secondPremise, currentScope;\r\n        currentScope = this.structure.getCurrentScope();\r\n        selected = _getValidSelecedPremises(this.premiseGraph.premises, this.structure.scopes);\r\n        _uncheckPremises(this.premiseGraph.premises, this.selected);\r\n        if (selected.length !== 1) {\r\n          return;\r\n        }\r\n        newPremises = fitchConjunction.elimination(selected[0], currentScope);\r\n        if (!newPremises) {\r\n          return;\r\n        }\r\n        _multipleEntialment.call(this, newPremises, selected);\r\n      };\r\n      this.negationIntro = function() {\r\n        var selected, newPremise, secondPremise, currentScope;\r\n        currentScope = this.structure.getCurrentScope();\r\n        selected = _getValidSelecedPremises(this.premiseGraph.premises, this.structure.scopes);\r\n        _uncheckPremises(this.premiseGraph.premises, this.selected);\r\n        if (selected.length !== 2) {\r\n          return;\r\n        }\r\n        newPremise = fitchNegation.introduction(selected[0], selected[1], currentScope);\r\n        if (!newPremise) {\r\n          return;\r\n        }\r\n        _entail.call(this, newPremise, selected);\r\n      };\r\n      this.negationElim = function() {\r\n        var selected, newPremise, secondPremise, currentScope;\r\n        currentScope = this.structure.getCurrentScope();\r\n        selected = _getValidSelecedPremises(this.premiseGraph.premises, this.structure.scopes);\r\n        _uncheckPremises(this.premiseGraph.premises, this.selected);\r\n        if (selected.length > 1) {\r\n          return;\r\n        }\r\n        newPremise = fitchNegation.elimination(selected[0], currentScope);\r\n        if (!newPremise) {\r\n          return;\r\n        }\r\n        _entail.call(this, newPremise, selected);\r\n      };\r\n      this.implicationIntro = function() {\r\n        var lastScope, currentScope, newPremise;\r\n        lastScope = this.structure.closeScope();\r\n        currentScope = this.structure.getCurrentScope();\r\n        newPremise = fitchImplication.introduction(currentScope, lastScope);\r\n        _entail.call(this, newPremise, [lastScope.head, lastScope.last]);\r\n        _uncheckPremises(this.premiseGraph.premises, this.selected);\r\n      };\r\n\r\n      this.implicationElim = function() {\r\n        var selected, newPremise, secondPremise, currentScope;\r\n        currentScope = this.structure.getCurrentScope();\r\n        selected = _getValidSelecedPremises(this.premiseGraph.premises, this.structure.scopes);\r\n        _uncheckPremises(this.premiseGraph.premises, this.selected);\r\n        if (selected.length !== 2) {\r\n          return;\r\n        }\r\n        newPremise = fitchImplication.elimination(selected[0], selected[1], currentScope);\r\n        if (!newPremise) {\r\n          return;\r\n        }\r\n        _entail.call(this, newPremise, selected);\r\n      };\r\n\r\n      this.orElimination = function () {\r\n        var selected, currentScope, newPremise, groupedPremises;\r\n        currentScope = this.structure.getCurrentScope();\r\n        selected = _getValidSelecedPremises(this.premiseGraph.premises, this.structure.scopes);\r\n        _uncheckPremises(this.premiseGraph.premises, this.selected);\r\n        if (selected.length < 3) {\r\n          return;\r\n        }\r\n        groupedPremises = _groupOrPremises(selected);\r\n        if (!groupedPremises) {\r\n          return;\r\n        }\r\n        newPremise = fitchDisjunction.elimination(groupedPremises, currentScope);\r\n        if (!newPremise) {\r\n          return;\r\n        }\r\n        _entail.call(this, newPremise, groupedPremises);\r\n      };\r\n      this.orIntroduction = function () {\r\n        this.showDisjoinField = true;\r\n      };\r\n      this.reiterate = function() {\r\n        var reiterated, currentScope, selected;\r\n        currentScope = this.structure.getCurrentScope();\r\n        selected = _getValidSelecedPremises(this.premiseGraph.premises, this.structure.scopes);\r\n        reiterated = selected.map(function(premise, key) {\r\n                            return Premise.new({\r\n                                scopeLayer: currentScope.layer,\r\n                                scopeId: currentScope.id,\r\n                                value: premise.value\r\n                            });\r\n                        });\r\n        _.forEach(reiterated, function (premise) {\r\n          _entail.call(this, premise, selected);\r\n        }.bind(this));\r\n        _uncheckPremises(this.premiseGraph.premises, this.selected);\r\n      };\r\n      this.delete = function () {\r\n        var selected, scopeIds;\r\n        selected = _getSelectedPremises(this.premiseGraph.premises);\r\n        _.forEach(selected, function (premise) {\r\n          this.premiseGraph.removeNode(premise);\r\n        }.bind(this));\r\n        scopeIds = _.map(this.premiseGraph.premises, 'scopeId');\r\n        this.structure.reset(this.premiseGraph.premises);\r\n      };\r\n      this.biconditionalIntro = function () {\r\n        var selected, newPremises, secondPremise, currentScope;\r\n        currentScope = this.structure.getCurrentScope();\r\n        selected = _getValidSelecedPremises(this.premiseGraph.premises, this.structure.scopes);\r\n        _uncheckPremises(this.premiseGraph.premises, this.selected);\r\n        if (selected.length !== 2) {\r\n          return;\r\n        }\r\n        newPremises = fitchBicondition.introduction(selected, currentScope);\r\n        if (!newPremises) {\r\n          return;\r\n        }\r\n        _multipleEntialment.call(this, newPremises, selected);\r\n      }\r\n      this.biconditionalElim = function () {\r\n        var selected, newPremises, secondPremise, currentScope;\r\n        currentScope = this.structure.getCurrentScope();\r\n        selected = _getValidSelecedPremises(this.premiseGraph.premises, this.structure.scopes);\r\n        _uncheckPremises(this.premiseGraph.premises, this.selected);\r\n        if (selected.length !== 1) {\r\n          return;\r\n        }\r\n        newPremises = fitchBicondition.elimination(selected[0], currentScope);\r\n        if (!newPremises) {\r\n          return;\r\n        }\r\n        _multipleEntialment.call(this, newPremises, selected);\r\n      }\r\n\r\n      /*Local functions*/\r\n      function _init() {\r\n        this.marginLeft = 20; //pixels\r\n        this.premise = '';\r\n        this.premiseGraph = PremiseTree.new();\r\n        this.selected = [];\r\n        this.showDisjoinField = false;\r\n        this.structure = FitchStack.new();\r\n        this.valueToDisjoin = '';\r\n      }\r\n      function _entail(premise, parentPremises) {\r\n        this.structure.entail(premise);\r\n        _appendPremiseChild(this.premiseGraph, premise, parentPremises);\r\n      }\r\n\r\n      function _multipleEntialment(premises, parentPremises) {\r\n        _.forEach(premises, function (premise) {\r\n          _entail.call(this, premise, parentPremises);\r\n        }.bind(this));\r\n      }\r\n\r\n      function _getSelectedPremises(premises) {\r\n        return _.filter(premises, 'checked');\r\n      }\r\n\r\n      function _getValidSelecedPremises(premises, scopes) {\r\n        var scopeIds = _.map(scopes, 'id');\r\n        return _getSelectedPremises(premises)\r\n               .filter(function(premise) {\r\n                    return scopeIds.indexOf(premise.scopeId) !== -1;\r\n                });\r\n      }\r\n\r\n      function _uncheckPremises(premises, selected) {\r\n        selected.length = 0;\r\n        return _.map(premises, function(premise) {\r\n            premise.checked = false;\r\n            return premise;\r\n        });\r\n      }\r\n\r\n      function _groupOrPremises(premises) {\r\n        var disjunctions, implications;\r\n        disjunctions = _.filter(premises, function (premise) {\r\n          return premise.isOr(premise.digest());\r\n        });\r\n        if  (disjunctions.length !== 1) {\r\n          return null;\r\n        }\r\n        implications = _.filter(premises, function (premise) {\r\n          return premise.isImplication(premise.digest());\r\n        });\r\n        if  (implications.length !== premises.length - 1) {\r\n          return null;\r\n        }\r\n        return {\r\n          disjunctions: disjunctions,\r\n          implications: implications\r\n        };\r\n      }\r\n\r\n      function _appendPremiseChild(structrue, childPremise, parentPremises) {\r\n        _.forEach(parentPremises, function (premise) {\r\n          structrue.appendChildNode(premise, childPremise);\r\n        });\r\n      }\r\n\r\n    });\r\n","'use strict';\r\nangular\r\n  .module('logicToolsApp')\r\n  .controller('MainCtrl', function ($location) {\r\n        this.goToTruth = function() {\r\n            $location.path('/truth-tables');\r\n        };\r\n        this.goToFitch = function() {\r\n            $location.path('/fitch');\r\n        };\r\n  });\r\n","'use strict';\r\n\r\nangular.module('logicToolsApp')\r\n  .controller('MenuCtrl', function () {\r\n    \r\n  });\r\n","'use strict';\r\n\r\nangular\r\n  .module('logicToolsApp')\r\n  .controller('TruthTableCtrl', function (tableGenerator) {\r\n        this.premises = [];\r\n        this.selectedPremises = [];\r\n        this.premise = '';\r\n        this.truthTable = {};\r\n        this.build = function() {\r\n            if(this.premise) {\r\n                tableGenerator.generate(this.premise);\r\n                this.truthTable.header = getTableHeader(tableGenerator);\r\n                this.truthTable.rows = getTableRows(tableGenerator);\r\n            }\r\n        };\r\n        function readPremise(premise) {\r\n            return premise.trim().split(/\\s+/g);\r\n        }\r\n        function getTableHeader(table) {\r\n            return _.chain(table.value).keys().map(function(val, key) {\r\n                return (val in this.labels) ? this.labels[val] : val;\r\n            }.bind(table)).value();\r\n        }\r\n        function getTableRows(table) {\r\n            var rows, tableValue;\r\n            rows = [];\r\n            tableValue = table.value;\r\n            _.each(_.values(tableValue), function(col, keyc) {\r\n                _.each(col, function(val, keyr) {\r\n                    if (!rows[keyr]) {\r\n                      rows.push([]);\r\n                    }\r\n                    rows[keyr][keyc] = val;\r\n                });\r\n            });\r\n            return rows;\r\n        }\r\n  });\r\n","'use strict';\r\n\r\nangular\r\n  .module('logicToolsApp')\r\n  .factory('formula', function() {\r\n\r\n    function isThen(premise) {\r\n      return /[=][>]/g.exec(premise);\r\n    }\r\n    function isAnd(premise) {\r\n      return /[&]/g.exec(premise);\r\n    }\r\n    function isOr(premise) {\r\n      return /[|]/g.exec(premise);\r\n    }\r\n    function isBicon(premise) {\r\n      return /[<][=][>]/g.exec(premise);\r\n    }\r\n\r\n    return {\r\n      /*Truth table methods*/\r\n      resultFn: function(premise) {\r\n        var getResult;\r\n        if (isBicon(premise)) {\r\n            getResult = function(a, b) {\r\n                return (!a || b) && (!b || a);\r\n            }\r\n        } else if (isThen(premise)) {\r\n            getResult = function(a, b) {\r\n                return !a || b;\r\n            }\r\n        } else if (isAnd(premise)) {\r\n            getResult = function(a, b) {\r\n                return a && b;\r\n            }\r\n        } else if (isOr(premise)) {\r\n            getResult = function(a, b) {\r\n                return a || b;\r\n            }\r\n        }\r\n        return getResult;\r\n      }\r\n    }\r\n  });\r\n","angular\r\n  .module('logicToolsApp')\r\n  .service('syntaxChecker', function () {\r\n    this.validate = function (premise) {\r\n      if (_emptyPremise(premise)) {\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    function _emptyPremise(premise) {\r\n      return !premise.value;\r\n    }\r\n    \r\n  });\r\n","angular\r\n  .module('logicToolsApp')\r\n  .factory('FitchStack', function(Scope) {\r\n\r\n    var scopeLayer, universalScope;\r\n    scopeLayer = 0;\r\n    universalScope = Scope.new({\r\n      layer: scopeLayer\r\n    });\r\n\r\n    function FitchStack(props) {\r\n      scopeLayer = 0;\r\n      this.scopes = [universalScope];\r\n      this.scopeHistory = [universalScope];\r\n    }\r\n\r\n    FitchStack.prototype.closeScope = function() {\r\n      var removedScope, newCurrentScope;\r\n      removedScope = _.remove(this.scopes, 'isFocused');\r\n      newCurrentScope = this.scopes[this.scopes.length - 1];\r\n      if (!newCurrentScope) {\r\n        return removedScope[0];\r\n      }\r\n      newCurrentScope.focus();\r\n      newCurrentScope.layer = --scopeLayer;\r\n      return removedScope[0];\r\n    };\r\n\r\n    FitchStack.prototype.openScope = function(headAssumption) {\r\n      var scope = Scope.new({\r\n        head: headAssumption,\r\n        layer: ++scopeLayer\r\n      });\r\n\r\n      if (this.scopes.length) {\r\n        this.scopes = _.map(this.scopes, function(scope) {\r\n          scope.blur();\r\n          return scope;\r\n        });\r\n      }\r\n\r\n      this.scopes.push(scope);\r\n      this.scopeHistory.push(scope);\r\n    };\r\n\r\n    FitchStack.prototype.entail = function(assumption) {\r\n      var currentScope = this.getCurrentScope();\r\n      currentScope.append(assumption);\r\n    };\r\n\r\n    FitchStack.prototype.getCurrentScope = function() {\r\n      return _.filter(this.scopes, 'isFocused')[0];\r\n    };\r\n\r\n    FitchStack.prototype.reset = function (premises) {\r\n      var currentScope;\r\n      this.scopes.length = 0;\r\n      this.scopeHistory.length = 0;\r\n      this.scopes = _setScopesItems(_createScopes(premises), premises);\r\n      currentScope = _.find(this.scopes, {\r\n        id: _getLastItem(premises).scopeId\r\n      });\r\n      currentScope.focus();\r\n      scopeLayer = currentScope.layer;\r\n      this.scopeHistory = this.scopes;\r\n      this.scopes = _getActiveScopes(this.scopes, premises);\r\n    }\r\n\r\n    function _getLastItem(items) {\r\n      return items.slice(-1)[0];\r\n    }\r\n\r\n    function _createScopes(premises) {\r\n      var scopes = _.chain(premises)\r\n                    .map(function (premise) {\r\n                      return {\r\n                        layer: premise.scopeLayer,\r\n                        id: premise.scopeId\r\n                      };\r\n                    })\r\n                    .uniqBy('id')\r\n                    .map(function (scopeBase) {\r\n                      return Scope.new({\r\n                        layer: scopeBase.layer,\r\n                        id: scopeBase.id\r\n                      });\r\n                    })\r\n                    .value();\r\n      return _.find(scopes, {layer: 0}) \r\n                  ? scopes\r\n                  : [universalScope].concat(scopes);\r\n    }\r\n\r\n    function _premisesByScope(premises) {\r\n      return _.groupBy(premises, 'scopeId');\r\n    }\r\n\r\n    function _setScopesItems(scopes, premises) {\r\n      return _.chain(scopes)\r\n              .map(function (scope) {\r\n                scope.items = _.sortBy(_premisesByScope(premises)[scope.id], 'scopeId');\r\n                scope.blur();\r\n                return scope;\r\n              })\r\n              .value();\r\n    }\r\n\r\n    function _getActiveScopes(scopes, premises) {\r\n      var prevScopeLayer, prevScopePosition, activeIds, scopePosition;\r\n      activeIds = [universalScope.id];\r\n      prevScopeLayer = 0;\r\n      _.forEach(premises, function (premise) {\r\n        scopePosition = activeIds.indexOf(premise.scopeId);\r\n        if (prevScopeLayer <= premise.scopeLayer && scopePosition === -1) {\r\n          activeIds.push(premise.scopeId);\r\n        } else if (prevScopeLayer > premise.scopeLayer && scopePosition !== -1) {\r\n          activeIds.splice(prevScopePosition, 1);\r\n        }\r\n        prevScopeLayer = premise.scopeLayer;\r\n        prevScopePosition = scopePosition;\r\n      });\r\n      return _.filter(scopes, function (scope) {\r\n        return activeIds.indexOf(scope.id) !== -1;\r\n      });\r\n    }\r\n\r\n    return {\r\n      new: function(props) {\r\n        var fitchProps = props || {};\r\n        return new FitchStack(fitchProps);\r\n      }\r\n    }\r\n\r\n  });\r\n","angular\r\n  .module('logicToolsApp')\r\n  .factory('PremiseTree', function () {\r\n\r\n    function PremiseTree(props) {\r\n      this.premises = [];\r\n      this.proofTree = [];\r\n    }\r\n\r\n    PremiseTree.prototype.appendNode = function (premiseNode) {\r\n      this.proofTree.push([]);\r\n      this.premises.push(premiseNode);\r\n    }\r\n\r\n    PremiseTree.prototype.appendChildNode = function (parentPremise, childPremise) {\r\n      var parentIndex, childIndex;\r\n      parentIndex = this.premises.indexOf(parentPremise);\r\n      childIndex = this.premises.indexOf(childPremise);\r\n\r\n      this.proofTree[parentIndex].push(childPremise.id);\r\n\r\n      if (childIndex === -1) {\r\n        this.premises.push(childPremise);\r\n        this.proofTree.push([]);\r\n      }\r\n    }\r\n\r\n    PremiseTree.prototype.removeNode = function (premiseToRemove) {\r\n      var childrenIds, grandChildrenIds;\r\n      childrenIds = _getChildrenIds(this.proofTree, this.premises, premiseToRemove);\r\n      while (childrenIds.length) {\r\n        grandChildrenIds = _getGrandchildren(this.proofTree, this.premises, childrenIds);\r\n        this.proofTree = _cutTree(this.proofTree, this.premises, childrenIds);\r\n        this.premises = _cutPremises(this.premises, childrenIds);\r\n        childrenIds = grandChildrenIds;\r\n      }\r\n      this.proofTree = _removeTreeNode(this.proofTree, this.premises, premiseToRemove);\r\n      this.premises = _removePremise(this.premises, premiseToRemove);\r\n      return this.premises;\r\n    }\r\n\r\n    function _removePremise(premises, premiseToRemove) {\r\n      var filteredPremises = _.filter(premises, function (premise) {\r\n        return premise.id !== premiseToRemove.id;\r\n      });\r\n      return _mergePremiseScopes(filteredPremises, premiseToRemove);\r\n    }\r\n\r\n    function _removeChildNode(node, childNode) {\r\n      return _.filter(node, function (child) {\r\n        return child !== childNode;\r\n      });\r\n    }\r\n\r\n    function _removeInvalidChildren(node, premises) {\r\n      return _.filter(node, function (child) {\r\n        return !!_findPremise(premises, child);\r\n      });\r\n    }\r\n\r\n    function _removeTreeNode(proofTree, premises, premiseToRemove) {\r\n      var premiseIndex = _getPremiseNodeIndex(premises, premiseToRemove);\r\n      return _.chain(proofTree)\r\n              .filter(function (node, indexNode) {\r\n                return indexNode !== premiseIndex;\r\n              })\r\n              .map(function (node) {\r\n                var newNode = _removeChildNode(node, premiseToRemove.id);\r\n                return _removeInvalidChildren(newNode, premises);\r\n              })\r\n              .value();\r\n    }\r\n\r\n    function _findPremise(premises, id) {\r\n      return _.find(premises, {id: id});\r\n    }\r\n\r\n    function _getChildrenIds(proofTree, premises, premise) {\r\n      var index = _getPremiseNodeIndex(premises, premise);\r\n      return proofTree[index];\r\n    }\r\n\r\n    function _getPremiseNodeIndex(premises, premise) {\r\n      return _.chain(premises)\r\n              .map('id')\r\n              .indexOf(premise.id)\r\n              .value();\r\n    }\r\n\r\n    function _cutTree(proofTree, premises, ids) {\r\n      return _.filter(proofTree, function (node, indexNode) {\r\n        return ids.indexOf(premises[indexNode].id) === -1;\r\n      });\r\n    }\r\n\r\n    function _cutPremises(premises, ids) {\r\n      return  _.filter(premises, function (premise) {\r\n        return ids.indexOf(premise.id) === -1;\r\n      });\r\n    }\r\n\r\n    function _getGrandchildren(proofTree, premises, childrenIds) {\r\n      return _.chain(childrenIds)\r\n              .map(function (id) {\r\n                var premise = _findPremise(premises, id) || {};\r\n                return _getChildrenIds(proofTree, premises, premise);\r\n               })\r\n              .flattenDeep()\r\n              .filter(function (id) {\r\n                return !!id;\r\n              })\r\n              .value();\r\n    }\r\n\r\n    function _mergePremiseScopes(premises, premiseToRemove) {\r\n      var prevScopeId, prevScopeLayer, layerIncrement;\r\n      layerIncrement = 0;\r\n      return _.map(premises, function (premise) {\r\n        if (prevScopeLayer === premise.scopeLayer && prevScopeId !== premise.scopeId) {\r\n          layerIncrement++;\r\n        }\r\n        prevScopeLayer = premise.scopeLayer;\r\n        prevScopeId = premise.scopeId;\r\n        premise.scopeLayer += layerIncrement;\r\n        return premise;\r\n      });\r\n    }\r\n\r\n    return {\r\n      new: function (props) {\r\n        return new PremiseTree(props);\r\n      }\r\n    };\r\n\r\n  });\r\n","angular\r\n  .module('logicToolsApp')\r\n  .factory('Scope', function() {\r\n\r\n    var id = 0;\r\n    function Scope(props) {\r\n      this.id = props.id || ++id;\r\n      this.layer = props.layer;\r\n      this.isFocused = true;\r\n      this.items = [];\r\n\r\n      if (props.head) {\r\n        this.items.push(props.head);\r\n      }\r\n    }\r\n\r\n    Scope.prototype.append = function(item) {\r\n      this.items.push(item);\r\n    }\r\n\r\n    Scope.prototype.blur = function() {\r\n      this.isFocused = false;\r\n    }\r\n\r\n    Scope.prototype.focus = function() {\r\n      this.isFocused = true;\r\n    }\r\n\r\n    Scope.prototype.remove = function(item) {\r\n      var index = item.indexOf(item);\r\n      return this.items.splice(index, 1);\r\n    }\r\n\r\n    Object.defineProperty(Scope.prototype, 'head', {\r\n      get: function() {\r\n        return this.items[0];\r\n      }\r\n    });\r\n\r\n    Object.defineProperty(Scope.prototype, 'last', {\r\n      get: function() {\r\n        return this.items[this.items.length - 1];\r\n      }\r\n    });\r\n\r\n    Object.defineProperty(Scope.prototype, 'size', {\r\n      get: function() {\r\n        return this.items.length;\r\n      }\r\n    });\r\n\r\n    return {\r\n      new: function(props) {\r\n        var scopeProps = props || {};\r\n        return new Scope(scopeProps);\r\n      }\r\n    }\r\n\r\n  });\r\n","angular\r\n  .module('logicToolsApp')\r\n  .service('fitchBicondition', function (Premise) {\r\n    this.introduction = function (premises, scope) {\r\n      if (!_validatePremises(premises[0], premises[1])) {\r\n        return null;\r\n      }\r\n      if (!_validateImplications(premises[0], premises[1])) {\r\n        return null;\r\n      }\r\n      return _getBiconditions(premises, scope);\r\n    };\r\n\r\n    this.elimination = function (premise, scope) {\r\n      var digested = premise.digest();\r\n      if (!premise.isBicon(digested)) {\r\n        return null;\r\n      }\r\n\r\n      return _getImplications(premise, digested, scope);\r\n    }\r\n\r\n    function _validatePremises(firstPremise, secondPremise) {\r\n      var firstValue, secondValue;\r\n      firstValue = firstPremise.digest();\r\n      secondValue = secondPremise.digest();\r\n      return firstPremise.isImplication(firstValue) && secondPremise.isImplication(secondValue);\r\n    }\r\n    function _validateImplications(firstPremise, secondPremise) {\r\n      var firstValue, secondValue, firstConclusion, firstAssumption,\r\n          secondConclusion, secondAssumption;\r\n      firstValue = firstPremise.digest();\r\n      secondValue = secondPremise.digest();\r\n      firstConclusion = firstPremise.getExpandedConclusion(firstValue);\r\n      firstAssumption = firstPremise.getExpandedAssumption(firstValue);\r\n      secondConclusion = secondPremise.getExpandedConclusion(secondValue);\r\n      secondAssumption = secondPremise.getExpandedAssumption(secondValue);\r\n      return firstConclusion === secondAssumption && secondConclusion === firstAssumption;\r\n    }\r\n    function _getImplications(premise, digested, scope) {\r\n      var atomics, index;\r\n      atomics = digested.split(/[<][=][>]/g);\r\n      index = atomics.length;\r\n      return _.map(atomics, function (atomicPremise) {\r\n        index--;\r\n        return Premise.new({\r\n          scopeLayer: scope.layer,\r\n          scopeId: scope.id,\r\n          value: premise.expand(atomicPremise) + '=>' + premise.expand(atomics[index])\r\n        });\r\n      });\r\n    }\r\n    function _getBiconditions(premises, scope) {\r\n      return _.map(premises, function (premise) {\r\n        var value = premise.digest()\r\n        return Premise.new({\r\n          scopeLayer: scope.layer,\r\n          scopeId: scope.id,\r\n          value: premise.getExpandedConclusion(value) + '<=>' + premise.getExpandedAssumption(value)\r\n        })\r\n      });\r\n    }\r\n  });\r\n","angular\r\n  .module('logicToolsApp')\r\n  .service('fitchConjunction', function (Premise) {\r\n    this.introduction = function (premises, scope) {\r\n      var selectedValues = _.map(premises, function (premise) {\r\n          return (premise.isCompound())\r\n                    ? '(' + premise.value + ')'\r\n                    : premise.value;\r\n      })\r\n      return _getConjuctions(selectedValues, scope);\r\n    }\r\n    this.elimination = function (premise, scope) {\r\n      var digestedPremise = premise.digest();\r\n      return _.chain(digestedPremise)\r\n              .split(/\\&+/)\r\n              .map(function (simplePremise) {\r\n                var expanded = premise.expand(simplePremise)\r\n                return Premise.new({\r\n                  scopeLayer: scope.layer,\r\n                  scopeId: scope.id,\r\n                  value: premise.unwrap(expanded)\r\n                });\r\n              })\r\n              .value();\r\n    }\r\n\r\n    function _getConjuctions(premisesValue, scope) {\r\n      return _.chain(premisesValue)\r\n              .map(function (premiseValue) {\r\n                return _getPosibleJoins(premiseValue, premisesValue, scope);\r\n              })\r\n              .flattenDeep()\r\n              .value();\r\n    }\r\n\r\n    function _getPosibleJoins(value, premisesValue, scope) {\r\n      return _.map(premisesValue, function (premiseValue) {\r\n        return Premise.new({\r\n          scopeLayer: scope.layer,\r\n          scopeId: scope.id,\r\n          value: value + '&' + premiseValue\r\n        });\r\n      });\r\n    }\r\n  });\r\n","'use strict';\r\n\r\nangular\r\n  .module('logicToolsApp')\r\n  .service('fitchDisjunction', function (Premise) {\r\n\r\n    this.elimination = function (premises, scope) {\r\n      var uniqueConclusions, assumptions, disjunction;\r\n      assumptions = _getAssumptions(premises.implications);\r\n      uniqueConclusions = _getUniqueConclusions(premises.implications);\r\n\r\n      if(uniqueConclusions.length !== 1) {\r\n        return null;\r\n      }\r\n\r\n      if(!_isValidOperation(assumptions, premises.disjunctions[0])) {\r\n        return null;\r\n      }\r\n\r\n      return Premise.new({\r\n        scopeLayer: scope.layer,\r\n        scopeId: scope.id,\r\n        value: uniqueConclusions[0]\r\n      });\r\n\r\n    }\r\n\r\n    this.introduction = function (value, selected, scope) {\r\n      var selectedValues = _.map(selected, function (premise) {\r\n          return (premise.isCompound())\r\n                    ? '(' + premise.value + ')'\r\n                    : premise.value;\r\n      });\r\n\r\n      return _getDisjunctions(value, selectedValues, scope)\r\n    }\r\n\r\n    function _getUniqueConclusions(implications) {\r\n      return _.chain(implications)\r\n              .map(function (premise) {\r\n                  return premise.expand(premise.getConclusion(premise.digest()));\r\n              })\r\n              .uniq()\r\n              .value();\r\n    }\r\n\r\n    function _getAssumptions(implications) {\r\n      return _.map(implications, function (premise) {\r\n                   return premise.expand(premise.getAssumption(premise.digest()));\r\n              });\r\n    }\r\n\r\n    function _getDisjunctions(value, premisesValue, scope) {\r\n      return _.chain(premisesValue)\r\n              .map(function (premiseValue) {\r\n                return _getPosibleJoins([value, premiseValue], scope);\r\n              })\r\n              .flattenDeep()\r\n              .value();\r\n    }\r\n\r\n    function _getPosibleJoins(premisesValue, scope) {\r\n      var index = premisesValue.length;\r\n      return _.map(premisesValue, function (premiseValue) {\r\n        index--;\r\n        return Premise.new({\r\n          scopeLayer: scope.layer,\r\n          scopeId: scope.id,\r\n          value: premiseValue + '|' + premisesValue[index]\r\n        });\r\n      });\r\n    }\r\n\r\n    function _isValidOperation(premises, disjunction) {\r\n      var structure, assumptions;\r\n      structure = disjunction.digest();\r\n      assumptions = premises.slice();\r\n\r\n      return _.filter(structure.split(/\\|+/), function(label) {\r\n          return assumptions.indexOf(disjunction.expand(label)) !== -1\r\n      }).length === premises.length;\r\n    }\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular\r\n  .module('logicToolsApp')\r\n  .service('fitchImplication', function (Premise) {\r\n\r\n    this.introduction = function(scope, lastScope) {\r\n      var head, last, digestedHead, digestedLast, assumption, conclusion;\r\n      head = lastScope.head;\r\n      last = lastScope.last;\r\n      digestedHead = head.digest();\r\n      digestedLast = last.digest();\r\n\r\n      assumption = (head.isCompound(head.value))\r\n                      ? '(' + head.value + ')'\r\n                      : head.value;\r\n\r\n      conclusion = (last.isCompound(last.value))\r\n                      ? '(' + last.value + ')'\r\n                      : last.value;\r\n      \r\n      if (head.hasNegation(digestedHead) && digestedHead !== head.value) {\r\n          assumption = head.value;\r\n      }\r\n      if (last.hasNegation(digestedLast) && digestedLast !== last.value) {\r\n          conclusion = last.value;\r\n      }\r\n\r\n      return Premise.new({\r\n        scopeLayer: scope.layer,\r\n        scopeId: scope.id,\r\n        value: assumption + '=>' + conclusion\r\n      });\r\n    };\r\n\r\n    this.elimination = function(premiseOne, premiseTwo, scope) {\r\n      var newPremise = eliminate(premiseTwo, premiseOne, scope) || eliminate(premiseOne, premiseTwo, scope);\r\n      if (!newPremise) {\r\n        return null;\r\n      }\r\n      newPremise.scopeLayer = scope.layer;\r\n      newPremise.scopeId = scope.id;\r\n      return newPremise;\r\n    };\r\n\r\n    function eliminate(premiseOne, premiseTwo, scope) {\r\n      var assumption, conclusion, structure, assumptionNegated;\r\n      structure = premiseOne.digest();\r\n      assumption = premiseOne.getAssumption(structure);\r\n      assumptionNegated = premiseOne.hasNegation(assumption);\r\n      assumption = premiseOne.expand(assumption);\r\n      assumption = (assumptionNegated)\r\n      ? assumption\r\n      : premiseOne.unwrap(assumption);\r\n\r\n  \t\tif (assumption === premiseTwo.value) {\r\n        conclusion = premiseOne.getConclusion(structure);\r\n  \t\t\treturn Premise.new({\r\n  \t\t\t\tscopeLayer : scope.layer,\r\n  \t\t\t\tscopeId : scope.id,\r\n  \t\t\t\tvalue: premiseOne.expand(conclusion)\r\n  \t\t\t});\r\n  \t\t}\r\n    \treturn null;\r\n    }\r\n  });\r\n","'use strict';\r\n\r\nangular\r\n  .module('logicToolsApp')\r\n  .service('fitchNegation', function (Premise) {\r\n\r\n    this.introduction = function(premiseOne, premiseTwo, scope) {\r\n      var newValue;\r\n\r\n    \tif (!_validImplications(premiseOne, premiseTwo)) {\r\n  \t\t\treturn null;\r\n  \t\t}\r\n  \t\tif (!_validPremises(premiseOne, premiseTwo)) {\r\n  \t\t\treturn null;\r\n  \t\t}\r\n  \t\tif (!_validNegations(premiseOne, premiseTwo)) {\r\n  \t\t\treturn null;\r\n  \t\t}\r\n  \t\tif (!_validConclusions(premiseOne, premiseTwo)) {\r\n  \t\t\treturn null;\r\n  \t\t}\r\n\r\n      newValue = _getAssumption(premiseOne);\r\n\r\n      return Premise.new({\r\n        scopeLayer: scope.layer,\r\n        scopeId: scope.id,\r\n  \t    value: '~' + newValue\r\n      });\r\n    };\r\n\r\n    this.elimination = function(premise, scope) {\r\n      var structure, newValue, negations;\r\n      structure = premise.digest();\r\n      negations = premise.value.match(/^\\~+/)[0];\r\n\r\n      if (negations.length <= 1) {\r\n          return;\r\n      }\r\n\r\n      newValue = negations.slice(2) + premise.removeNegation(structure);\r\n      newValue = (!premise.hasNegation(newValue))\r\n      ? premise.unwrap(premise.expand(newValue))\r\n      : premise.expand(newValue);\r\n\r\n  \t\treturn Premise.new({\r\n        scopeLayer: scope.layer,\r\n        scopeId: scope.id,\r\n        value: newValue\r\n      });\r\n  \t};\r\n\r\n  \tfunction _validImplications(premiseOne, premiseTwo) {\r\n  \t\treturn premiseOne.isImplication() && premiseTwo.isImplication();\r\n  \t}\r\n\r\n  \tfunction _validPremises(premiseOne, premiseTwo) {\r\n  \t\treturn _getAssumption(premiseOne) === _getAssumption(premiseTwo);\r\n  \t}\r\n\r\n  \tfunction _validNegations(premiseOne, premiseTwo) {\r\n  \t\treturn _validNegation(premiseOne, premiseTwo) || _validNegation(premiseTwo, premiseOne);\r\n  \t}\r\n\r\n  \tfunction _validConclusions(premiseOne, premiseTwo) {\r\n  \t\treturn _validConclusion(premiseOne, premiseTwo) || _validConclusion(premiseTwo, premiseOne);\r\n  \t}\r\n\r\n  \tfunction _validConclusion(premiseOne, premiseTwo) {\r\n  \t\treturn _getPureConclusion(premiseOne) === _getConclusion(premiseTwo);\r\n  \t}\r\n\r\n  \tfunction _validNegation(premiseOne, premiseTwo) {\r\n      var conclusionOne, conclusionTwo;\r\n      conclusionOne = _getRawConclusion(premiseOne);\r\n      conclusionTwo = _getRawConclusion(premiseTwo);\r\n  \t\treturn premiseOne.hasNegation(conclusionOne) && !premiseOne.hasNegation(conclusionTwo);\r\n  \t}\r\n\r\n    function _removeNegation(premise) {\r\n      return premise.replace(/\\~+/g,'');\r\n    }\r\n\r\n    function _getAssumption(premise) {\r\n      var structure, assumption;\r\n      structure = premise.digest();\r\n      assumption = premise.getAssumption(structure);\r\n      return premise.expand(assumption);\r\n    }\r\n\r\n    function _getConclusion(premise) {\r\n      var structure, conclusion, expanded;\r\n      structure = premise.digest();\r\n      conclusion = premise.getConclusion(structure);\r\n      expanded = premise.expand(_removeNegation(conclusion));\r\n      return (premise.hasNegation(conclusion))\r\n      ? '~' + expanded\r\n      : expanded;\r\n    }\r\n\r\n    function _getPureConclusion(premise) {\r\n      var structure, conclusion, expanded;\r\n      structure = premise.digest();\r\n      conclusion = premise.getConclusion(structure);\r\n      return premise.expand(_removeNegation(conclusion));\r\n    }\r\n\r\n    function _getRawConclusion(premise, structure) {\r\n      var structure, conclusion;\r\n      structure = premise.digest();\r\n      conclusion = premise.getConclusion(structure);\r\n      return conclusion;\r\n    }\r\n\r\n});\r\n","angular\r\n  .module('logicToolsApp')\r\n  .factory('Premise', function() {\r\n\r\n    var NEGATION_REGEX, IMPLICATION_REGEX, id;\r\n    NEGATION_REGEX = /^\\~+/;\r\n    IMPLICATION_REGEX = /[=][>]/g;\r\n    id = 0;\r\n\r\n  \tfunction Premise(props) {\r\n      this.labels = {};\r\n      this.id = ++id;\r\n      this.scopeLayer = props.scopeLayer;\r\n      this.scopeId = props.scopeId;\r\n      this.value = _removeSpaces(props.value);\r\n  \t}\r\n\r\n    Premise.prototype.digest = function(callback) {\r\n      var premises, copyPremise, label, labels, value;\r\n      value = this.value;\r\n      premises = [];\r\n      labels = {};\r\n      label = 0;\r\n\r\n      while(premises) {\r\n        premises = _breakPremise(value);\r\n        _.each(_extractPremises(value), function(premise) {\r\n          copyPremise = premise.slice();\r\n          labels[++label] = _createLabels(labels, copyPremise);\r\n          value = _reducePremise(value, _unwrap(premise), label);\r\n          if (callback) {\r\n              callback(premise, value, label);\r\n          }\r\n        });\r\n      }\r\n      this.labels = _.assign({}, labels);\r\n      return value;\r\n    }\r\n\r\n    Premise.prototype.isImplication = function(structrue) {\r\n  \t  var base = structrue || this.value;\r\n      return !!base.match(IMPLICATION_REGEX);\r\n    };\r\n    Premise.prototype.isAnd = function (structrue) {\r\n      var base = structrue || this.value;\r\n      return /[&]/g.exec(base);\r\n    };\r\n    Premise.prototype.isOr = function (structrue) {\r\n      var base = structrue || this.value;\r\n      return /[|]/g.exec(base);\r\n    };\r\n    Premise.prototype.isBicon = function (structrue) {\r\n      var base = structrue || this.value;\r\n      return /[<][=][>]/g.exec(base);\r\n    };\r\n    Premise.prototype.expand = function(premiseLabel) {\r\n      var premise, indexPremise, labels, symbol;\r\n      indexPremise = premiseLabel.replace(NEGATION_REGEX, '');\r\n      labels = this.labels;\r\n      premise = labels[indexPremise] || this.removeNegation(premiseLabel);\r\n      symbol = (this.hasNegation(premiseLabel))\r\n      ? premiseLabel.match(NEGATION_REGEX)[0]\r\n      : '';\r\n      return  symbol + _expandPremise(labels, premise);\r\n    };\r\n    Premise.prototype.getAssumption = function(structrue) {\r\n      var base, splited\r\n      base = structrue || this.value;\r\n      splited = _splitImplication(base);\r\n      return (splited) ? splited[0] : undefined;\r\n    };\r\n    Premise.prototype.getConclusion = function(structrue) {\r\n      var base, splited\r\n      base = structrue || this.value;\r\n      splited = _splitImplication(base);\r\n      return (splited) ? splited[1] : undefined;\r\n    };\r\n    Premise.prototype.getExpandedAssumption = function(structrue) {\r\n      var base, splited\r\n      base = structrue || this.value;\r\n      splited = _splitImplication(base);\r\n      return (splited) ? this.expand(splited[0]) : undefined;\r\n    };\r\n    Premise.prototype.getExpandedConclusion = function(structrue) {\r\n      var base, splited\r\n      base = structrue || this.value;\r\n      splited = _splitImplication(base);\r\n      return (splited) ? this.expand(splited[1]) : undefined;\r\n    };\r\n    Premise.prototype.getPrimitives = function(structrue) {\r\n      var base = structrue || this.value;\r\n      return base.match(/\\w+/g);\r\n    }\r\n    Premise.prototype.removeNegation = function(structrue) {\r\n      var base = structrue || this.value;\r\n      return base.replace(NEGATION_REGEX, '');\r\n    }\r\n    Premise.prototype.hasNegation = function(structrue) {\r\n      var base = structrue || this.value;\r\n      return !!base.match(NEGATION_REGEX);\r\n    }\r\n    Premise.prototype.isCompound = function(structrue) {\r\n      var base = structrue || this.value;\r\n      return !!base.match(/[<=>|&]+/);\r\n    }\r\n    Premise.prototype.unwrap = function (value) {\r\n      return _unwrap(value || this.value);\r\n    };\r\n\r\n    function _breakPremise(value) {\r\n      return value.match(/[(]{1}[\\w~<=>|&]+(?=[)]{1})[)]{1}/g);\r\n    }\r\n\r\n    function _createLabels (labels, premise) {\r\n      var createdLabels;\r\n      createdLabels = _.keys(labels);\r\n      return Array.prototype.map.call(premise, function(val, k) {\r\n          return (createdLabels.indexOf(val) !== -1) ? labels[val] : val;\r\n      }).join('');\r\n    }\r\n\r\n    function _extractPremises(premise) {\r\n      return (_breakPremise(premise)) ? _breakPremise(premise) : [premise];\r\n    }\r\n\r\n    function _reducePremise(premise, subPremise, label) {\r\n      var matchExpr;\r\n      subPremise = subPremise.replace(/[|]/g, '[|]'); //This is special for the 'or' character.\r\n      matchExpr = new RegExp('[(]' + subPremise + '[)]', 'g');\r\n      return premise.replace(matchExpr, label);\r\n    }\r\n\r\n    function _expandPremise(labels, value) {\r\n      var premiseValue, labelsKeys, symbol;\r\n      premiseValue = value.slice();\r\n      labelsKeys = _.keys(labels);\r\n      return _.map(labelsKeys, function(label) {\r\n                premiseValue = premiseValue.replace(label, labels[label]);\r\n                return premiseValue;\r\n            }).slice(-1)[0];\r\n    }\r\n\r\n    function _splitImplication(value) {\r\n        return value.split(IMPLICATION_REGEX);\r\n    }\r\n\r\n    function _unwrap(value) {\r\n      var unwraped;\r\n      if (!value) {\r\n        return undefined;\r\n      }\r\n      unwraped = value.match(/[(]{1}([\\w\\W]+)[)]{1}/);\r\n      return (unwraped) ? unwraped[1] : value;\r\n    }\r\n\r\n    function _removeSpaces(value) {\r\n      return value.replace(/\\s+/g,'');\r\n    }\r\n\r\n    return {\r\n      new: function(props) {\r\n        return new Premise(props);\r\n      }\r\n    }\r\n\r\n  });\r\n","'use strict';\r\n\r\nangular\r\n  .module('logicToolsApp')\r\n  .service('tableGenerator', function(Premise, Table) {\r\n\r\n    var basePremise, table;\r\n    this.generate = function(premise) {\r\n      var premises, atomicPremises;\r\n      premises = [];\r\n      this.premise = premise;\r\n      basePremise = Premise.new({\r\n          value: premise\r\n      });\r\n      table = Table.new();\r\n      reset.call(this);\r\n      atomicPremises = _getAtomicPremises(premise);\r\n      this.value = _buildAtomicColumn(atomicPremises);\r\n      this.value = _.assign({}, this.value, _buildCompoundColumn(this.value));\r\n      this.labels = basePremise.labels;\r\n    };\r\n\r\n    function reset() {\r\n      this.value = {};\r\n      this.labels = {};\r\n    }\r\n\r\n    reset.call(this);\r\n\r\n    function _getAtomicPremises(premise) {\r\n      return _.uniq(premise.match(/[^~<=>()&|\\s]/g));\r\n    }\r\n    function _buildAtomicValues(value, key) {\r\n      var columns, column, rows;\r\n      columns = _.keys(value);\r\n      rows = Math.pow(2, columns.length);\r\n      column = 0;\r\n      return _.mapValues(value, function (value, key) {\r\n        return table.getAtomicValue(++column, rows);\r\n      });\r\n    }\r\n    function _buildAtomicColumn(atomicPremises) {\r\n      var initialPremises, premisesValues;\r\n      initialPremises = {};\r\n      _.forEach(atomicPremises, function (premise, key) {\r\n          initialPremises[premise] = [];\r\n          premisesValues = _buildAtomicValues(initialPremises, key);\r\n      });\r\n      return premisesValues;\r\n    }\r\n    function _buildCompoundColumn(tableValue) {\r\n      var values;\r\n      values = _.assign({}, tableValue);\r\n      basePremise.digest(function(premise, value, label) {\r\n          values[label] = table.getCompoundValue(premise, label, values);\r\n      });\r\n      return values;\r\n    }\r\n  });\r\n","angular\r\n  .module('logicToolsApp')\r\n  .factory('Table', function(formula) {\r\n\r\n    function Table () {}\r\n\r\n    Table.prototype.getCompoundValue = function(premise, key, tableValue) {\r\n      var ca, cb, c, a, b, getFormula, atomics, values;\r\n      getFormula = formula.resultFn(premise);\r\n      atomics = premise.match(/\\w+|[~]+\\w|\\d+|[~]+\\d/g);\r\n      values = [];\r\n      ca = _negateColumn(tableValue, atomics[0]);\r\n      cb = _negateColumn(tableValue, atomics[1]);\r\n      c = 0;\r\n      while (ca.length > c) {\r\n          a = ca[c];\r\n          b = cb[c];\r\n          values.push(Number(getFormula(a, b)));\r\n          c++;\r\n      }\r\n      return values;\r\n    }\r\n\r\n    Table.prototype.getAtomicValue = function(nCol, nRows) {\r\n      var values, value, row, nchange, sumup;\r\n      values = [];\r\n      value = 0;\r\n      row = 1;\r\n      sumup = 1;\r\n      nchange = Math.pow(2, nCol);\r\n      while (row <= nRows) {\r\n          if (((1 / nchange) * nRows) * sumup < row) {\r\n              value = 1 - value;\r\n              sumup++;\r\n          }\r\n          values.push(value);\r\n          row++;\r\n      }\r\n      return values;\r\n    }\r\n\r\n    function _negateColumn(value, premise) {\r\n      /*Negate if negation exists*/\r\n      var negation, result, atomic, operator;\r\n      negation = premise.match(/[~]/g);\r\n      atomic = premise.match(/\\w+/g);\r\n      if (negation) {\r\n          result = _.map(value[atomic[0]], function(val, key) {\r\n              operator = negation.join('').replace(/[~]/g, '!');\r\n              return Number(eval(operator + val));\r\n          });\r\n      } else {\r\n          result = value[atomic[0]];\r\n      }\r\n      return result;\r\n    }\r\n\r\n\t\treturn {\r\n\t\t\tnew: function() {\r\n\t\t\t\treturn new Table();\r\n\t\t\t}\r\n\t\t}\r\n\r\n  });\r\n"],"sourceRoot":"/source/"}